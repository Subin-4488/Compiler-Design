< CHARACTER(S), TOKEN>


LINE NO: 1
<< #, operator >>
<< include,keyword >>
<< <, operator >>
<< stdio.h, identifier >>
<< >, operator >>

LINE NO: 2
<< #, operator >>
<< include,keyword >>
<< <, operator >>
<< string.h, identifier >>
<< >, operator >>

LINE NO: 3
<< #, operator >>
<< include,keyword >>
<< <, operator >>
<< stdlib.h, identifier >>
<< >, operator >>

LINE NO: 4
<< #, operator >>
<< include,keyword >>
<< <, operator >>
<< unistd.h, identifier >>
<< >, operator >>

LINE NO: 5

LINE NO: 6
<< FILE,keyword >>
<< *fin, identifier >>
<< =, operator >>
<< NULL,keyword >>
<< ,, seperator >>
<< *fout, identifier >>
<< =, operator >>
<< NULL,keyword >>
<< ;, seperator >>

LINE NO: 7
<< char,keyword >>
<< line, identifier >>
<< [, operator >>
<< 1000, literal >>
<< ], operator >>
<< ;, seperator >>

LINE NO: 8
<< char,keyword >>
<< subs, identifier >>
<< [, operator >>
<< 1000, literal >>
<< ], operator >>
<< ;, seperator >>

LINE NO: 9

LINE NO: 10
<< int,keyword >>
<< kws, identifier >>
<< =, operator >>
<< 27, literal >>
<< ;, seperator >>

LINE NO: 11
<< int,keyword >>
<< ops, identifier >>
<< =, operator >>
<< 13, literal >>
<< ;, seperator >>

LINE NO: 12
<< int,keyword >>
<< seps, identifier >>
<< =, operator >>
<< 7, literal >>
<< ;, seperator >>

LINE NO: 13
<< int,keyword >>
<< lits, identifier >>
<< =, operator >>
<< 12, literal >>
<< ;, seperator >>

LINE NO: 14

LINE NO: 15
<< char,keyword >>
<< keywords, identifier >>
<< [, operator >>
<< ], operator >>
<< [, operator >>
<< 20, literal >>
<< ], operator >>
<< =, operator >>
<< {, seperator >>
<< "void", literal >>
<< ,, seperator >>
<< "main", literal >>
<< ,, seperator >>
<< "include", literal >>
<< ,, seperator >>
<< "define", literal >>
<< ,, seperator >>
<< "printf", literal >>
<< ,, seperator >>
<< "scanf", literal >>
<< ,, seperator >>
<< "fgets", literal >>
<< ,, seperator >>

LINE NO: 16
<< "for", literal >>
<< ,, seperator >>
<< "while", literal >>
<< ,, seperator >>
<< "int", literal >>
<< ,, seperator >>
<< "char", literal >>
<< ,, seperator >>
<< "strlen", literal >>
<< ,, seperator >>
<< "FILE", literal >>
<< ,, seperator >>
<< "fopen", literal >>
<< ,, seperator >>
<< "feof", literal >>
<< ,, seperator >>
<< "NULL", literal >>
<< ,, seperator >>

LINE NO: 17
<< "if", literal >>
<< ,, seperator >>
<< "return", literal >>
<< ,, seperator >>
<< "double", literal >>
<< ,, seperator >>
<< "continue", literal >>
<< ,, seperator >>
<< "break", literal >>
<< ,, seperator >>
<< "strcmp", literal >>
<< ,, seperator >>
<< "strcat", literal >>
<< ,, seperator >>
<< "fflush", literal >>
<< ,, seperator >>
<< "fscanf", literal >>
<< ,, seperator >>
<< "fprintf", literal >>
<< ,, seperator >>
<< "strcpy", literal >>
<< }, seperator >>
<< ;, seperator >>

LINE NO: 18
<< char,keyword >>
<< operators, identifier >>
<< [, operator >>
<< ], operator >>
<< [, operator >>
<< 20, literal >>
<< ], operator >>
<< =, operator >>
<< {, seperator >>
<< "+", literal >>
<< ,, seperator >>
<< "-", literal >>
<< ,, seperator >>
<< "&", literal >>
<< ,, seperator >>
<< "%", literal >>
<< ,, seperator >>
<< "=", literal >>
<< ,, seperator >>
<< "!", literal >>
<< ,, seperator >>
<< "#", literal >>
<< ,, seperator >>
<< ">=", literal >>
<< ,, seperator >>
<< "<=", literal >>
<< ,, seperator >>
<< ">", literal >>
<< ,, seperator >>
<< "<", literal >>
<< ,, seperator >>
<< "[", literal >>
<< ,, seperator >>
<< "]", literal >>
<< }, seperator >>
<< ;, seperator >>

LINE NO: 19
<< char,keyword >>
<< seperators, identifier >>
<< [, operator >>
<< ], operator >>
<< [, operator >>
<< 20, literal >>
<< ], operator >>
<< =, operator >>
<< {, seperator >>
<< "{", literal >>
<< ,, seperator >>
<< "}", literal >>
<< ,, seperator >>
<< "(", literal >>
<< ,, seperator >>
<< ")", literal >>
<< ,, seperator >>
<< ";", literal >>
<< ,, seperator >>
<< ",", literal >>
<< ,, seperator >>
<< "\n", literal >>
<< ,, seperator >>
<< }, seperator >>
<< ;, seperator >>

LINE NO: 20
<< char,keyword >>
<< literals, identifier >>
<< [, operator >>
<< ], operator >>
<< [, operator >>
<< 20, literal >>
<< ], operator >>
<< =, operator >>
<< {, seperator >>
<< "\", literal >>
<< ", ", literal >>
<< \'", identifier >>
<< ,, seperator >>
<< "1", literal >>
<< ,, seperator >>
<< "2", literal >>
<< ,, seperator >>
<< "3", literal >>
<< ,, seperator >>
<< "4", literal >>
<< ,, seperator >>
<< "5", literal >>
<< ,, seperator >>
<< "6", literal >>
<< ,, seperator >>
<< "7", literal >>
<< ,, seperator >>
<< "8", literal >>
<< ,, seperator >>
<< "9", literal >>
<< ,, seperator >>
<< "0", literal >>
<< }, seperator >>
<< ;, seperator >>

LINE NO: 21

LINE NO: 22
<< char,keyword >>
<< ids, identifier >>
<< [, operator >>
<< 1000, literal >>
<< ], operator >>
<< [, operator >>
<< 1000, literal >>
<< ], operator >>
<< ;, seperator >>
<< int,keyword >>
<< id, identifier >>
<< =, operator >>
<< 0, literal >>
<< ;, seperator >>

LINE NO: 23

LINE NO: 24
<< void,keyword >>
<< substring, identifier >>
<< (, seperator >>
<< char,keyword >>
<< str, identifier >>
<< [, operator >>
<< ], operator >>
<< ,, seperator >>
<< int,keyword >>
<< f, identifier >>
<< ,, seperator >>
<< int,keyword >>
<< l, identifier >>
<< ), seperator >>
<< {, seperator >>

LINE NO: 25
<< int,keyword >>
<< n, identifier >>
<< =, operator >>
<< strlen,keyword >>
<< (, seperator >>
<< str, identifier >>
<< ), seperator >>
<< ;, seperator >>

LINE NO: 26
<< subs, identifier >>
<< [, operator >>
<< 0, literal >>
<< ], operator >>
<< =, operator >>
<< '\0', literal >>
<< ;, seperator >>

LINE NO: 27
<< int,keyword >>
<< k, identifier >>
<< =, operator >>
<< 0, literal >>
<< ;, seperator >>

LINE NO: 28
<< for,keyword >>
<< (, seperator >>
<< int,keyword >>
<< i, identifier >>
<< =, operator >>
<< f, identifier >>
<< ;, seperator >>
<< i, identifier >>
<< <, operator >>
<< l, identifier >>
<< ;, seperator >>
<< i, identifier >>
<< +, operator >>
<< +, operator >>
<< ), seperator >>

LINE NO: 29
<< subs, identifier >>
<< [, operator >>
<< k, identifier >>
<< +, operator >>
<< +, operator >>
<< ], operator >>
<< =, operator >>
<< str, identifier >>
<< [, operator >>
<< i, identifier >>
<< ], operator >>
<< ;, seperator >>

LINE NO: 30
<< subs, identifier >>
<< [, operator >>
<< k, identifier >>
<< ], operator >>
<< =, operator >>
<< '\0', literal >>
<< ;, seperator >>

LINE NO: 31
<< return,keyword >>
<< ;, seperator >>

LINE NO: 32
<< }, seperator >>

LINE NO: 33

LINE NO: 34
<< void,keyword >>
<< writeToOutput, identifier >>
<< (, seperator >>
<< char,keyword >>
<< res, identifier >>
<< [, operator >>
<< ], operator >>
<< ,, seperator >>
<< int,keyword >>
<< flag, identifier >>
<< ), seperator >>
<< {, seperator >>

LINE NO: 35
<< if,keyword >>
<< (, seperator >>
<< !, operator >>
<< flag, identifier >>
<< ), seperator >>

LINE NO: 36
<< fprintf,keyword >>
<< (, seperator >>
<< fout, identifier >>
<< ,, seperator >>
<< "\n%s", literal >>
<< ,, seperator >>
<< res, identifier >>
<< ), seperator >>
<< ;, seperator >>

LINE NO: 37
<< else, identifier >>
<< {, seperator >>

LINE NO: 38
<< fprintf,keyword >>
<< (, seperator >>
<< fout, identifier >>
<< ,, seperator >>
<< "\nError: ", literal >>
<< ), seperator >>
<< ;, seperator >>

LINE NO: 39
<< fprintf,keyword >>
<< (, seperator >>
<< fout, identifier >>
<< ,, seperator >>
<< "%s", literal >>
<< ,, seperator >>
<< res, identifier >>
<< ), seperator >>
<< ;, seperator >>

LINE NO: 40
<< }, seperator >>

LINE NO: 41
<< fflush,keyword >>
<< (, seperator >>
<< fout, identifier >>
<< ), seperator >>
<< ;, seperator >>

LINE NO: 42
<< }, seperator >>

LINE NO: 43

LINE NO: 44
<< int,keyword >>
<< isComment, identifier >>
<< (, seperator >>
<< int,keyword >>
<< start, identifier >>
<< ,, seperator >>
<< int,keyword >>
<< end, identifier >>
<< ,, seperator >>
<< int,keyword >>
<< n, identifier >>
<< ), seperator >>
<< {, seperator >>

LINE NO: 45
<< substring, identifier >>
<< (, seperator >>
<< line, identifier >>
<< ,, seperator >>
<< start, identifier >>
<< ,, seperator >>
<< 2, literal >>
<< +, operator >>
<< start, identifier >>
<< ), seperator >>
<< ;, seperator >>

LINE NO: 46
<< if,keyword >>
<< (, seperator >>
<< !, operator >>
<< strcmp,keyword >>
<< (, seperator >>
<< subs, identifier >>
<< ,, seperator >>
<< "//", literal >>
<< ), seperator >>
<< ), seperator >>
<< return,keyword >>
<< 1, literal >>
<< ;, seperator >>

LINE NO: 47
<< else, identifier >>
<< if,keyword >>
<< (, seperator >>
<< !, operator >>
<< strcmp,keyword >>
<< (, seperator >>
<< subs, identifier >>
<< ,, seperator >>
<< "/*", literal >>
<< ), seperator >>
<< ), seperator >>
<< return,keyword >>
<< 2, literal >>
<< ;, seperator >>

LINE NO: 48
<< else, identifier >>
<< if,keyword >>
<< (, seperator >>
<< line, identifier >>
<< [, operator >>
<< start, identifier >>
<< ], operator >>
<< =, operator >>
<< =, operator >>
<< '/', literal >>
<< ), seperator >>
<< return,keyword >>
<< -, operator >>
<< 1, literal >>
<< ;, seperator >>

LINE NO: 49
<< else, identifier >>
<< return,keyword >>
<< 0, literal >>
<< ;, seperator >>

LINE NO: 50
<< }, seperator >>

LINE NO: 51

LINE NO: 52
<< int,keyword >>
<< isKeyword, identifier >>
<< (, seperator >>
<< int,keyword >>
<< start, identifier >>
<< ,, seperator >>
<< int,keyword >>
<< end, identifier >>
<< ,, seperator >>
<< int,keyword >>
<< n, identifier >>
<< ), seperator >>
<< {, seperator >>

LINE NO: 53
<< substring, identifier >>
<< (, seperator >>
<< line, identifier >>
<< ,, seperator >>
<< start, identifier >>
<< ,, seperator >>
<< end, identifier >>
<< ), seperator >>
<< ;, seperator >>

LINE NO: 54
<< for,keyword >>
<< (, seperator >>
<< int,keyword >>
<< i, identifier >>
<< =, operator >>
<< 0, literal >>
<< ;, seperator >>
<< i, identifier >>
<< <, operator >>
<< kws, identifier >>
<< ;, seperator >>
<< i, identifier >>
<< +, operator >>
<< +, operator >>
<< ), seperator >>
<< {, seperator >>

LINE NO: 55
<< if,keyword >>
<< (, seperator >>
<< !, operator >>
<< strcmp,keyword >>
<< (, seperator >>
<< subs, identifier >>
<< ,, seperator >>
<< keywords, identifier >>
<< [, operator >>
<< i, identifier >>
<< ], operator >>
<< ), seperator >>
<< ), seperator >>

LINE NO: 56
<< return,keyword >>
<< 1, literal >>
<< ;, seperator >>

LINE NO: 57
<< }, seperator >>

LINE NO: 58
<< return,keyword >>
<< 0, literal >>
<< ;, seperator >>

LINE NO: 59
<< }, seperator >>

LINE NO: 60

LINE NO: 61
<< int,keyword >>
<< isOperator, identifier >>
<< (, seperator >>
<< int,keyword >>
<< start, identifier >>
<< ,, seperator >>
<< int,keyword >>
<< end, identifier >>
<< ,, seperator >>
<< int,keyword >>
<< n, identifier >>
<< ), seperator >>
<< {, seperator >>

LINE NO: 62
<< substring, identifier >>
<< (, seperator >>
<< line, identifier >>
<< ,, seperator >>
<< start, identifier >>
<< ,, seperator >>
<< end, identifier >>
<< ), seperator >>
<< ;, seperator >>

LINE NO: 63
<< for,keyword >>
<< (, seperator >>
<< int,keyword >>
<< i, identifier >>
<< =, operator >>
<< 0, literal >>
<< ;, seperator >>
<< i, identifier >>
<< <, operator >>
<< ops, identifier >>
<< ;, seperator >>
<< i, identifier >>
<< +, operator >>
<< +, operator >>
<< ), seperator >>
<< {, seperator >>

LINE NO: 64
<< if,keyword >>
<< (, seperator >>
<< !, operator >>
<< strcmp,keyword >>
<< (, seperator >>
<< subs, identifier >>
<< ,, seperator >>
<< operators, identifier >>
<< [, operator >>
<< i, identifier >>
<< ], operator >>
<< ), seperator >>
<< ), seperator >>
<< {, seperator >>

LINE NO: 65
<< substring, identifier >>
<< (, seperator >>
<< line, identifier >>
<< ,, seperator >>
<< start, identifier >>
<< ,, seperator >>
<< end, identifier >>
<< +, operator >>
<< 1, literal >>
<< ), seperator >>
<< ;, seperator >>

LINE NO: 66
<< for,keyword >>
<< (, seperator >>
<< int,keyword >>
<< j, identifier >>
<< =, operator >>
<< 0, literal >>
<< ;, seperator >>
<< j, identifier >>
<< <, operator >>
<< ops, identifier >>
<< ;, seperator >>
<< j, identifier >>
<< +, operator >>
<< +, operator >>
<< ), seperator >>
<< {, seperator >>

LINE NO: 67
<< if,keyword >>
<< (, seperator >>
<< !, operator >>
<< strcmp,keyword >>
<< (, seperator >>
<< subs, identifier >>
<< ,, seperator >>
<< operators, identifier >>
<< [, operator >>
<< j, identifier >>
<< ], operator >>
<< ), seperator >>
<< ), seperator >>

LINE NO: 68
<< return,keyword >>
<< 1, literal >>
<< ;, seperator >>

LINE NO: 69
<< }, seperator >>

LINE NO: 70
<< substring, identifier >>
<< (, seperator >>
<< line, identifier >>
<< ,, seperator >>
<< start, identifier >>
<< ,, seperator >>
<< end, identifier >>
<< ), seperator >>
<< ;, seperator >>

LINE NO: 71
<< return,keyword >>
<< 1, literal >>
<< ;, seperator >>

LINE NO: 72
<< }, seperator >>

LINE NO: 73
<< }, seperator >>

LINE NO: 74
<< return,keyword >>
<< 0, literal >>
<< ;, seperator >>

LINE NO: 75
<< }, seperator >>

LINE NO: 76

LINE NO: 77
<< int,keyword >>
<< isseperator, identifier >>
<< (, seperator >>
<< int,keyword >>
<< start, identifier >>
<< ,, seperator >>
<< int,keyword >>
<< end, identifier >>
<< ,, seperator >>
<< int,keyword >>
<< n, identifier >>
<< ), seperator >>
<< {, seperator >>

LINE NO: 78
<< substring, identifier >>
<< (, seperator >>
<< line, identifier >>
<< ,, seperator >>
<< start, identifier >>
<< ,, seperator >>
<< end, identifier >>
<< ), seperator >>
<< ;, seperator >>

LINE NO: 79
<< for,keyword >>
<< (, seperator >>
<< int,keyword >>
<< i, identifier >>
<< =, operator >>
<< 0, literal >>
<< ;, seperator >>
<< i, identifier >>
<< <, operator >>
<< seps, identifier >>
<< ;, seperator >>
<< i, identifier >>
<< +, operator >>
<< +, operator >>
<< ), seperator >>
<< {, seperator >>

LINE NO: 80
<< if,keyword >>
<< (, seperator >>
<< !, operator >>
<< strcmp,keyword >>
<< (, seperator >>
<< subs, identifier >>
<< ,, seperator >>
<< seperators, identifier >>
<< [, operator >>
<< i, identifier >>
<< ], operator >>
<< ), seperator >>
<< ), seperator >>

LINE NO: 81
<< return,keyword >>
<< 1, literal >>
<< ;, seperator >>

LINE NO: 82
<< }, seperator >>

LINE NO: 83
<< return,keyword >>
<< 0, literal >>
<< ;, seperator >>

LINE NO: 84
<< }, seperator >>

LINE NO: 85

LINE NO: 86
<< int,keyword >>
<< isLiteral, identifier >>
<< (, seperator >>
<< int,keyword >>
<< start, identifier >>
<< ,, seperator >>
<< int,keyword >>
<< end, identifier >>
<< ,, seperator >>
<< int,keyword >>
<< n, identifier >>
<< ), seperator >>
<< {, seperator >>

LINE NO: 87
<< substring, identifier >>
<< (, seperator >>
<< line, identifier >>
<< ,, seperator >>
<< start, identifier >>
<< ,, seperator >>
<< 1, literal >>
<< +, operator >>
<< start, identifier >>
<< ), seperator >>
<< ;, seperator >>

LINE NO: 88
<< for,keyword >>
<< (, seperator >>
<< int,keyword >>
<< i, identifier >>
<< =, operator >>
<< 0, literal >>
<< ;, seperator >>
<< i, identifier >>
<< <, operator >>
<< lits, identifier >>
<< ;, seperator >>
<< i, identifier >>
<< +, operator >>
<< +, operator >>
<< ), seperator >>
<< {, seperator >>

LINE NO: 89
<< if,keyword >>
<< (, seperator >>
<< !, operator >>
<< strcmp,keyword >>
<< (, seperator >>
<< subs, identifier >>
<< ,, seperator >>
<< literals, identifier >>
<< [, operator >>
<< i, identifier >>
<< ], operator >>
<< ), seperator >>
<< ), seperator >>
<< {, seperator >>

LINE NO: 90
<< if,keyword >>
<< (, seperator >>
<< !, operator >>
<< strcmp,keyword >>
<< (, seperator >>
<< subs, identifier >>
<< ,, seperator >>
<< "\", literal >>
<< ", literal >>
<< ), seperator >>
<< ), seperator >>

LINE NO: 91
<< return,keyword >>
<< 1, literal >>
<< ;, seperator >>

LINE NO: 92
<< else, identifier >>
<< if,keyword >>
<< (, seperator >>
<< !, operator >>
<< strcmp,keyword >>
<< (, seperator >>
<< subs, identifier >>
<< ,, seperator >>
<< "\'", literal >>
<< ), seperator >>
<< ), seperator >>

LINE NO: 93
<< return,keyword >>
<< 2, literal >>
<< ;, seperator >>

LINE NO: 94
<< else, identifier >>

LINE NO: 95
<< return,keyword >>
<< 3, literal >>
<< ;, seperator >>

LINE NO: 96
<< }, seperator >>

LINE NO: 97
<< }, seperator >>

LINE NO: 98

LINE NO: 99
<< return,keyword >>
<< 0, literal >>
<< ;, seperator >>

LINE NO: 100
<< }, seperator >>

LINE NO: 101

LINE NO: 102
<< void,keyword >>
<< findTerminatingComment, identifier >>
<< (, seperator >>
<< int,keyword >>
<< start, identifier >>
<< ), seperator >>
<< {, seperator >>

LINE NO: 103
<< while,keyword >>
<< (, seperator >>
<< 1, literal >>
<< ), seperator >>
<< {, seperator >>

LINE NO: 104
<< for,keyword >>
<< (, seperator >>
<< int,keyword >>
<< i, identifier >>
<< =, operator >>
<< start, identifier >>
<< ;, seperator >>
<< i, identifier >>
<< <, operator >>
<< strlen,keyword >>
<< (, seperator >>
<< line, identifier >>
<< ), seperator >>
<< -, operator >>
<< 1, literal >>
<< ;, seperator >>
<< i, identifier >>
<< +, operator >>
<< +, operator >>
<< ), seperator >>
<< {, seperator >>

LINE NO: 105
<< if,keyword >>
<< (, seperator >>
<< line, identifier >>
<< [, operator >>
<< i, identifier >>
<< ], operator >>
<< =, operator >>
<< =, operator >>
<< '*', literal >>
<< &, operator >>
<< &, operator >>
<< line, identifier >>
<< [, operator >>
<< i, identifier >>
<< +, operator >>
<< 1, literal >>
<< ], operator >>
<< =, operator >>
<< =, operator >>
<< '/', literal >>
<< ), seperator >>
<< {, seperator >>

LINE NO: 106
<< line, identifier >>
<< [, operator >>
<< 0, literal >>
<< ], operator >>
<< =, operator >>
<< '\0', literal >>
<< ;, seperator >>

LINE NO: 107
<< return,keyword >>
<< ;, seperator >>

LINE NO: 108
<< }, seperator >>

LINE NO: 109
<< }, seperator >>

LINE NO: 110
<< fgets,keyword >>
<< (, seperator >>
<< line, identifier >>
<< ,, seperator >>
<< 250, literal >>
<< ,, seperator >>
<< fin, identifier >>
<< ), seperator >>
<< ;, seperator >>

LINE NO: 111
<< start, identifier >>
<< =, operator >>
<< 0, literal >>
<< ;, seperator >>

LINE NO: 112
<< }, seperator >>

LINE NO: 113
<< }, seperator >>

LINE NO: 114

LINE NO: 115
<< void,keyword >>
<< processLine, identifier >>
<< (, seperator >>
<< ), seperator >>
<< {, seperator >>

LINE NO: 116
<< int,keyword >>
<< n, identifier >>
<< =, operator >>
<< strlen,keyword >>
<< (, seperator >>
<< line, identifier >>
<< ), seperator >>
<< ;, seperator >>

LINE NO: 117
<< int,keyword >>
<< invalid, identifier >>
<< =, operator >>
<< 0, literal >>
<< ;, seperator >>

LINE NO: 118
<< for,keyword >>
<< (, seperator >>
<< int,keyword >>
<< i, identifier >>
<< =, operator >>
<< 0, literal >>
<< ;, seperator >>
<< i, identifier >>
<< <, operator >>
<< n, identifier >>
<< -, operator >>
<< 1, literal >>
<< ;, seperator >>
<< i, identifier >>
<< +, operator >>
<< +, operator >>
<< ), seperator >>
<< {, seperator >>

LINE NO: 119
<< invalid, identifier >>
<< =, operator >>
<< 0, literal >>
<< ;, seperator >>

LINE NO: 120
<< if,keyword >>
<< (, seperator >>
<< line, identifier >>
<< [, operator >>
<< i, identifier >>
<< ], operator >>
<< =, operator >>
<< =, operator >>
<< ' ', literal >>
<< ||, identifier >>
<< line, identifier >>
<< [, operator >>
<< i, identifier >>
<< ], operator >>
<< =, operator >>
<< =, operator >>
<< '\t', literal >>
<< ), seperator >>
<< continue,keyword >>
<< ;, seperator >>

LINE NO: 121
<< for,keyword >>
<< (, seperator >>
<< int,keyword >>
<< j, identifier >>
<< =, operator >>
<< i, identifier >>
<< +, operator >>
<< 1, literal >>
<< ;, seperator >>
<< j, identifier >>
<< <, operator >>
<< n, identifier >>
<< ;, seperator >>
<< j, identifier >>
<< +, operator >>
<< +, operator >>
<< ), seperator >>
<< {, seperator >>

LINE NO: 122
<< int,keyword >>
<< ret, identifier >>
<< =, operator >>
<< -, operator >>
<< 2, literal >>
<< ;, seperator >>

LINE NO: 123
<< if,keyword >>
<< (, seperator >>
<< (, seperator >>
<< ret, identifier >>
<< =, operator >>
<< isComment, identifier >>
<< (, seperator >>
<< i, identifier >>
<< ,, seperator >>
<< j, identifier >>
<< ,, seperator >>
<< n, identifier >>
<< ), seperator >>
<< ), seperator >>
<< >, operator >>
<< 0, literal >>
<< ), seperator >>
<< {, seperator >>

LINE NO: 124
<< if,keyword >>
<< (, seperator >>
<< ret, identifier >>
<< =, operator >>
<< =, operator >>
<< 1, literal >>
<< ), seperator >>
<< {, seperator >>

LINE NO: 125
<< return,keyword >>
<< ;, seperator >>

LINE NO: 126
<< }, seperator >>

LINE NO: 127
<< else, identifier >>
<< {, seperator >>

LINE NO: 128
<< findTerminatingComment, identifier >>
<< (, seperator >>
<< i, identifier >>
<< ), seperator >>
<< ;, seperator >>

LINE NO: 129
<< return,keyword >>
<< ;, seperator >>

LINE NO: 130
<< }, seperator >>

LINE NO: 131
<< }, seperator >>

LINE NO: 132
<< else, identifier >>
<< if,keyword >>
<< (, seperator >>
<< ret, identifier >>
<< =, operator >>
<< =, operator >>
<< -, operator >>
<< 1, literal >>
<< ), seperator >>
<< {, seperator >>

LINE NO: 133

LINE NO: 134
<< writeToOutput, identifier >>
<< (, seperator >>
<< "/", literal >>
<< ,, seperator >>
<< 1, literal >>
<< ), seperator >>
<< ;, seperator >>

LINE NO: 135
<< }, seperator >>

LINE NO: 136
<< else, identifier >>
<< if,keyword >>
<< (, seperator >>
<< (, seperator >>
<< ret, identifier >>
<< =, operator >>
<< isOperator, identifier >>
<< (, seperator >>
<< i, identifier >>
<< ,, seperator >>
<< j, identifier >>
<< ,, seperator >>
<< n, identifier >>
<< ), seperator >>
<< ), seperator >>
<< >, operator >>
<< 0, literal >>
<< ), seperator >>
<< {, seperator >>

LINE NO: 137
<< char,keyword >>
<< buff, identifier >>
<< [, operator >>
<< 100, literal >>
<< ], operator >>
<< ;, seperator >>
<< buff, identifier >>
<< [, operator >>
<< 0, literal >>
<< ], operator >>
<< =, operator >>
<< '\0', literal >>
<< ;, seperator >>

LINE NO: 138
<< strcat,keyword >>
<< (, seperator >>
<< buff, identifier >>
<< ,, seperator >>
<< "<< ", literal >>
<< ), seperator >>
<< ;, seperator >>
<< strcat,keyword >>
<< (, seperator >>
<< buff, identifier >>
<< ,, seperator >>
<< subs, identifier >>
<< ), seperator >>
<< ;, seperator >>
<< strcat,keyword >>
<< (, seperator >>
<< buff, identifier >>
<< ,, seperator >>
<< ", operator >>", literal >>
<< ), seperator >>
<< ;, seperator >>

LINE NO: 139
<< writeToOutput, identifier >>
<< (, seperator >>
<< buff, identifier >>
<< ,, seperator >>
<< 0, literal >>
<< ), seperator >>
<< ;, seperator >>

LINE NO: 140
<< i, identifier >>
<< =, operator >>
<< j, identifier >>
<< -, operator >>
<< 1, literal >>
<< ;, seperator >>

LINE NO: 141
<< break,keyword >>
<< ;, seperator >>

LINE NO: 142
<< }, seperator >>

LINE NO: 143
<< else, identifier >>
<< if,keyword >>
<< (, seperator >>
<< (, seperator >>
<< ret, identifier >>
<< =, operator >>
<< isKeyword, identifier >>
<< (, seperator >>
<< i, identifier >>
<< ,, seperator >>
<< j, identifier >>
<< ,, seperator >>
<< n, identifier >>
<< ), seperator >>
<< ), seperator >>
<< >, operator >>
<< 0, literal >>
<< ), seperator >>
<< {, seperator >>

LINE NO: 144
<< char,keyword >>
<< buff, identifier >>
<< [, operator >>
<< 100, literal >>
<< ], operator >>
<< ;, seperator >>
<< buff, identifier >>
<< [, operator >>
<< 0, literal >>
<< ], operator >>
<< =, operator >>
<< '\0', literal >>
<< ;, seperator >>

LINE NO: 145
<< strcat,keyword >>
<< (, seperator >>
<< buff, identifier >>
<< ,, seperator >>
<< "<< ", literal >>
<< ), seperator >>
<< ;, seperator >>
<< strcat,keyword >>
<< (, seperator >>
<< buff, identifier >>
<< ,, seperator >>
<< subs, identifier >>
<< ), seperator >>
<< ;, seperator >>
<< strcat,keyword >>
<< (, seperator >>
<< buff, identifier >>
<< ,, seperator >>
<< ",keyword >>", literal >>
<< ), seperator >>
<< ;, seperator >>

LINE NO: 146
<< writeToOutput, identifier >>
<< (, seperator >>
<< buff, identifier >>
<< ,, seperator >>
<< 0, literal >>
<< ), seperator >>
<< ;, seperator >>

LINE NO: 147
<< i, identifier >>
<< =, operator >>
<< j, identifier >>
<< -, operator >>
<< 1, literal >>
<< ;, seperator >>

LINE NO: 148
<< break,keyword >>
<< ;, seperator >>

LINE NO: 149
<< }, seperator >>

LINE NO: 150
<< else, identifier >>
<< if,keyword >>
<< (, seperator >>
<< (, seperator >>
<< ret, identifier >>
<< =, operator >>
<< isseperator, identifier >>
<< (, seperator >>
<< i, identifier >>
<< ,, seperator >>
<< j, identifier >>
<< ,, seperator >>
<< n, identifier >>
<< ), seperator >>
<< >, operator >>
<< 0, literal >>
<< ), seperator >>
<< ), seperator >>
<< {, seperator >>

LINE NO: 151
<< char,keyword >>
<< buff, identifier >>
<< [, operator >>
<< 100, literal >>
<< ], operator >>
<< ;, seperator >>
<< buff, identifier >>
<< [, operator >>
<< 0, literal >>
<< ], operator >>
<< =, operator >>
<< '\0', literal >>
<< ;, seperator >>

LINE NO: 152
<< strcat,keyword >>
<< (, seperator >>
<< buff, identifier >>
<< ,, seperator >>
<< "<< ", literal >>
<< ), seperator >>
<< ;, seperator >>
<< strcat,keyword >>
<< (, seperator >>
<< buff, identifier >>
<< ,, seperator >>
<< subs, identifier >>
<< ), seperator >>
<< ;, seperator >>
<< strcat,keyword >>
<< (, seperator >>
<< buff, identifier >>
<< ,, seperator >>
<< ", seperator >>", literal >>
<< ), seperator >>
<< ;, seperator >>

LINE NO: 153
<< writeToOutput, identifier >>
<< (, seperator >>
<< buff, identifier >>
<< ,, seperator >>
<< 0, literal >>
<< ), seperator >>
<< ;, seperator >>

LINE NO: 154
<< i, identifier >>
<< =, operator >>
<< j, identifier >>
<< -, operator >>
<< 1, literal >>
<< ;, seperator >>

LINE NO: 155
<< break,keyword >>
<< ;, seperator >>

LINE NO: 156
<< }, seperator >>

LINE NO: 157
<< else, identifier >>
<< if,keyword >>
<< (, seperator >>
<< (, seperator >>
<< ret, identifier >>
<< =, operator >>
<< isLiteral, identifier >>
<< (, seperator >>
<< i, identifier >>
<< ,, seperator >>
<< j, identifier >>
<< ,, seperator >>
<< n, identifier >>
<< ), seperator >>
<< ), seperator >>
<< >, operator >>
<< 0, literal >>
<< ), seperator >>
<< {, seperator >>

LINE NO: 158
<< if,keyword >>
<< (, seperator >>
<< ret, identifier >>
<< =, operator >>
<< =, operator >>
<< 1, literal >>
<< ), seperator >>
<< {, seperator >>

LINE NO: 159
<< while,keyword >>
<< (, seperator >>
<< j, identifier >>
<< <, operator >>
<< strlen,keyword >>
<< (, seperator >>
<< line, identifier >>
<< ), seperator >>
<< ), seperator >>
<< {, seperator >>

LINE NO: 160
<< if,keyword >>
<< (, seperator >>
<< line, identifier >>
<< [, operator >>
<< j, identifier >>
<< ], operator >>
<< =, operator >>
<< =, operator >>
<< '\"', literal >>
<< ), seperator >>
<< {, seperator >>

LINE NO: 161
<< substring, identifier >>
<< (, seperator >>
<< line, identifier >>
<< ,, seperator >>
<< i, identifier >>
<< ,, seperator >>
<< j, identifier >>
<< +, operator >>
<< 1, literal >>
<< ), seperator >>
<< ;, seperator >>

LINE NO: 162
<< i, identifier >>
<< =, operator >>
<< j, identifier >>
<< ;, seperator >>

LINE NO: 163
<< break,keyword >>
<< ;, seperator >>

LINE NO: 164
<< }, seperator >>

LINE NO: 165
<< j, identifier >>
<< +, operator >>
<< +, operator >>
<< ;, seperator >>

LINE NO: 166
<< }, seperator >>

LINE NO: 167
<< }, seperator >>

LINE NO: 168
<< else, identifier >>
<< if,keyword >>
<< (, seperator >>
<< ret, identifier >>
<< =, operator >>
<< =, operator >>
<< 2, literal >>
<< ), seperator >>
<< {, seperator >>

LINE NO: 169
<< while,keyword >>
<< (, seperator >>
<< j, identifier >>
<< <, operator >>
<< strlen,keyword >>
<< (, seperator >>
<< line, identifier >>
<< ), seperator >>
<< ), seperator >>
<< {, seperator >>

LINE NO: 170
<< if,keyword >>
<< (, seperator >>
<< line, identifier >>
<< [, operator >>
<< j, identifier >>
<< ], operator >>
<< =, operator >>
<< =, operator >>
<< '\', literal >>
<< ', literal >>
<< ), seperator >>
<< {, seperator >>

LINE NO: 171
<< substring, identifier >>
<< (, seperator >>
<< line, identifier >>
<< ,, seperator >>
<< i, identifier >>
<< ,, seperator >>
<< j, identifier >>
<< +, operator >>
<< 1, literal >>
<< ), seperator >>
<< ;, seperator >>

LINE NO: 172
<< i, identifier >>
<< =, operator >>
<< j, identifier >>
<< ;, seperator >>

LINE NO: 173
<< break,keyword >>
<< ;, seperator >>

LINE NO: 174
<< }, seperator >>

LINE NO: 175
<< j, identifier >>
<< +, operator >>
<< +, operator >>
<< ;, seperator >>

LINE NO: 176
<< }, seperator >>

LINE NO: 177
<< }, seperator >>

LINE NO: 178
<< else, identifier >>
<< if,keyword >>
<< (, seperator >>
<< ret, identifier >>
<< =, operator >>
<< =, operator >>
<< 3, literal >>
<< ), seperator >>
<< {, seperator >>

LINE NO: 179
<< while,keyword >>
<< (, seperator >>
<< j, identifier >>
<< <, operator >>
<< strlen,keyword >>
<< (, seperator >>
<< line, identifier >>
<< ), seperator >>
<< &, operator >>
<< &, operator >>
<< !, operator >>
<< isOperator, identifier >>
<< (, seperator >>
<< j, identifier >>
<< ,, seperator >>
<< j, identifier >>
<< +, operator >>
<< 1, literal >>
<< ,, seperator >>
<< n, identifier >>
<< ), seperator >>
<< &, operator >>
<< &, operator >>
<< !, operator >>
<< isseperator, identifier >>
<< (, seperator >>
<< j, identifier >>
<< ,, seperator >>
<< j, identifier >>
<< +, operator >>
<< 1, literal >>
<< ,, seperator >>
<< n, identifier >>
<< ), seperator >>
<< &, operator >>
<< &, operator >>
<< line, identifier >>
<< [, operator >>
<< j, identifier >>
<< ], operator >>
<< !, operator >>
<< =, operator >>
<< ' ', literal >>
<< ), seperator >>
<< {, seperator >>

LINE NO: 180
<< if,keyword >>
<< (, seperator >>
<< isLiteral, identifier >>
<< (, seperator >>
<< j, identifier >>
<< ,, seperator >>
<< j, identifier >>
<< +, operator >>
<< 1, literal >>
<< ,, seperator >>
<< n, identifier >>
<< ), seperator >>
<< !, operator >>
<< =, operator >>
<< 3, literal >>
<< ), seperator >>

LINE NO: 181
<< invalid, identifier >>
<< =, operator >>
<< 1, literal >>
<< ;, seperator >>

LINE NO: 182
<< j, identifier >>
<< +, operator >>
<< +, operator >>
<< ;, seperator >>

LINE NO: 183
<< }, seperator >>

LINE NO: 184
<< substring, identifier >>
<< (, seperator >>
<< line, identifier >>
<< ,, seperator >>
<< i, identifier >>
<< ,, seperator >>
<< j, identifier >>
<< ), seperator >>
<< ;, seperator >>

LINE NO: 185
<< i, identifier >>
<< =, operator >>
<< j, identifier >>
<< -, operator >>
<< 1, literal >>
<< ;, seperator >>

LINE NO: 186
<< }, seperator >>

LINE NO: 187
<< char,keyword >>
<< buff, identifier >>
<< [, operator >>
<< 100, literal >>
<< ], operator >>
<< ;, seperator >>
<< buff, identifier >>
<< [, operator >>
<< 0, literal >>
<< ], operator >>
<< =, operator >>
<< '\0', literal >>
<< ;, seperator >>

LINE NO: 188
<< if,keyword >>
<< (, seperator >>
<< !, operator >>
<< invalid, identifier >>
<< ), seperator >>
<< {, seperator >>

LINE NO: 189
<< strcat,keyword >>
<< (, seperator >>
<< buff, identifier >>
<< ,, seperator >>
<< "<< ", literal >>
<< ), seperator >>
<< ;, seperator >>
<< strcat,keyword >>
<< (, seperator >>
<< buff, identifier >>
<< ,, seperator >>
<< subs, identifier >>
<< ), seperator >>
<< ;, seperator >>
<< strcat,keyword >>
<< (, seperator >>
<< buff, identifier >>
<< ,, seperator >>
<< ", literal >>", literal >>
<< ), seperator >>
<< ;, seperator >>

LINE NO: 190
<< }, seperator >>

LINE NO: 191
<< else, identifier >>
<< {, seperator >>

LINE NO: 192
<< strcat,keyword >>
<< (, seperator >>
<< buff, identifier >>
<< ,, seperator >>
<< "<< ", literal >>
<< ), seperator >>
<< ;, seperator >>
<< strcat,keyword >>
<< (, seperator >>
<< buff, identifier >>
<< ,, seperator >>
<< subs, identifier >>
<< ), seperator >>
<< ;, seperator >>
<< strcat,keyword >>
<< (, seperator >>
<< buff, identifier >>
<< ,, seperator >>
<< ", Invalid Identifier >>", literal >>
<< ), seperator >>
<< ;, seperator >>

LINE NO: 193
<< }, seperator >>

LINE NO: 194
<< writeToOutput, identifier >>
<< (, seperator >>
<< buff, identifier >>
<< ,, seperator >>
<< 0, literal >>
<< ), seperator >>
<< ;, seperator >>

LINE NO: 195
<< break,keyword >>
<< ;, seperator >>

LINE NO: 196
<< }, seperator >>

LINE NO: 197
<< else, identifier >>
<< {, seperator >>

LINE NO: 198
<< if,keyword >>
<< (, seperator >>
<< isOperator, identifier >>
<< (, seperator >>
<< j, identifier >>
<< ,, seperator >>
<< j, identifier >>
<< +, operator >>
<< 1, literal >>
<< ,, seperator >>
<< n, identifier >>
<< ), seperator >>
<< ||, identifier >>
<< isseperator, identifier >>
<< (, seperator >>
<< j, identifier >>
<< ,, seperator >>
<< j, identifier >>
<< +, operator >>
<< 1, literal >>
<< ,, seperator >>
<< n, identifier >>
<< ), seperator >>
<< ||, identifier >>
<< line, identifier >>
<< [, operator >>
<< j, identifier >>
<< ], operator >>
<< =, operator >>
<< =, operator >>
<< ' ', literal >>
<< ), seperator >>
<< {, seperator >>

LINE NO: 199
<< substring, identifier >>
<< (, seperator >>
<< line, identifier >>
<< ,, seperator >>
<< i, identifier >>
<< ,, seperator >>
<< j, identifier >>
<< ), seperator >>
<< ;, seperator >>

LINE NO: 200
<< char,keyword >>
<< buff, identifier >>
<< [, operator >>
<< 100, literal >>
<< ], operator >>
<< ;, seperator >>

LINE NO: 201
<< buff, identifier >>
<< [, operator >>
<< 0, literal >>
<< ], operator >>
<< =, operator >>
<< '\0', literal >>
<< ;, seperator >>

LINE NO: 202
<< strcat,keyword >>
<< (, seperator >>
<< buff, identifier >>
<< ,, seperator >>
<< "<< ", literal >>
<< ), seperator >>
<< ;, seperator >>

LINE NO: 203
<< strcat,keyword >>
<< (, seperator >>
<< buff, identifier >>
<< ,, seperator >>
<< subs, identifier >>
<< ), seperator >>
<< ;, seperator >>

LINE NO: 204
<< strcat,keyword >>
<< (, seperator >>
<< buff, identifier >>
<< ,, seperator >>
<< ", identifier >>", literal >>
<< ), seperator >>
<< ;, seperator >>

LINE NO: 205
<< writeToOutput, identifier >>
<< (, seperator >>
<< buff, identifier >>
<< ,, seperator >>
<< 0, literal >>
<< ), seperator >>
<< ;, seperator >>

LINE NO: 206
<< i, identifier >>
<< =, operator >>
<< j, identifier >>
<< -, operator >>
<< 1, literal >>
<< ;, seperator >>

LINE NO: 207
<< break,keyword >>
<< ;, seperator >>

LINE NO: 208
<< }, seperator >>

LINE NO: 209
<< }, seperator >>

LINE NO: 210
<< }, seperator >>

LINE NO: 211
<< }, seperator >>

LINE NO: 212
<< }, seperator >>

LINE NO: 213

LINE NO: 214
<< void,keyword >>
<< main,keyword >>
<< (, seperator >>
<< ), seperator >>
<< {, seperator >>

LINE NO: 215

LINE NO: 216

LINE NO: 217
<< fin, identifier >>
<< =, operator >>
<< fopen,keyword >>
<< (, seperator >>
<< "input.txt", literal >>
<< ,, seperator >>
<< "r", literal >>
<< ), seperator >>
<< ;, seperator >>

LINE NO: 218
<< fout, identifier >>
<< =, operator >>
<< fopen,keyword >>
<< (, seperator >>
<< "tokens.txt", literal >>
<< ,, seperator >>
<< "w", literal >>
<< ), seperator >>
<< ;, seperator >>

LINE NO: 219
<< fprintf,keyword >>
<< (, seperator >>
<< fout, identifier >>
<< ,, seperator >>
<< "< CHARACTER(S), TOKEN>\n", literal >>
<< ), seperator >>
<< ;, seperator >>

LINE NO: 220
<< int,keyword >>
<< k, identifier >>
<< =, operator >>
<< 1, literal >>
<< ;, seperator >>

LINE NO: 221
<< while,keyword >>
<< (, seperator >>
<< !, operator >>
<< feof,keyword >>
<< (, seperator >>
<< fin, identifier >>
<< ), seperator >>
<< ), seperator >>
<< {, seperator >>

LINE NO: 222
<< fprintf,keyword >>
<< (, seperator >>
<< fout, identifier >>
<< ,, seperator >>
<< "\n\nLINE NO: %d", literal >>
<< ,, seperator >>
<< k, identifier >>
<< +, operator >>
<< +, operator >>
<< ), seperator >>
<< ;, seperator >>

LINE NO: 223
<< fgets,keyword >>
<< (, seperator >>
<< line, identifier >>
<< ,, seperator >>
<< 250, literal >>
<< ,, seperator >>
<< fin, identifier >>
<< ), seperator >>
<< ;, seperator >>

LINE NO: 224
<< processLine, identifier >>
<< (, seperator >>
<< ), seperator >>
<< ;, seperator >>

LINE NO: 225
<< line, identifier >>
<< [, operator >>
<< 0, literal >>
<< ], operator >>
<< =, operator >>
<< '\0', literal >>
<< ;, seperator >>

LINE NO: 226
<< subs, identifier >>
<< [, operator >>
<< 0, literal >>
<< ], operator >>
<< =, operator >>
<< '\0', literal >>
<< ;, seperator >>

LINE NO: 227
<< }, seperator >>

LINE NO: 228